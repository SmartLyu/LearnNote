{"./":{"url":"./","title":"介绍","keywords":"","body":"YuaN 笔记 源位置： GitHub 加速位置： 国内私人地址 感悟想法 沟通 \\iff 传输 + 回馈 When Who in Where do What for Why, and How to solve. 生活数学式 (1.01)^{365} = 37.8 , (1.02)^{365} = 1377.4 (0.09)^{365} = 0.03 , (0.98)^{365} = 0.0002 积少成多，流沙易逝，所有的成败都取决于一个坚持，坚持积累，坚持不放纵自己才能成功。 \\lim_{t->now}{过程} = 行动 当时间无限趋近现在这个时间点，所谓过程 就是 当前做的行动 (过程 + 过去)' = 行动的结果 \\int (结果) + 过去 = 过程 过去 是一个常量 ， 而 整个进行了的过程​ 的导数(趋势) 就必然指向了​未来的结果 ， 而累计的无数已行结果 的积分就是 整个过程 综1、2上： 任何漫长的过程，都是无数有作为的行动组成的； 过程和结果没有重要性区别，已行过程决定未来结果，已有结果组成整个过程。 问题分析的泰勒公式 问自己一次 why 即一个高阶求导，公式如下： 问题 = Why + \\frac{Why(Why)}{1!} + \\frac{Why(Why(Why))}{2!} + \\frac{Why(Why(Why(Why)))}{3!} ... + o(why^n) (余项即累计经验) 反复问自己：\"这是为什么\"；得出结论后，在问：\"这又是为什么\" ，不断循环，就能分析清楚，而累计的经验即余项； 越多次反问、越丰富经验，就能更接近真相。 "},"Golang/":{"url":"Golang/","title":"Golang","keywords":"","body":"Go 基础 方法 数据结构 特殊处理 命令操作 单元测试 验证码 普罗米修斯 "},"Golang/Basis.html":{"url":"Golang/Basis.html","title":"基础","keywords":"","body":"配置go环境 解压go包 配置GOPATH 如果需要下载包 golang.org/x/net/context --> github.com/golang/net/context goland(IDE)快捷操作 功能 操作 删除当前行 ⌘⌫ 行注释 ⌘/ 块注释 ⌥⌘/ 函数使用提示 ⌘P 代码检查并提供快速修复 ⌥⏎ 切换window ⌥⌘` 切换指定位置 ⌘⌥ 方向键 常用操作 swag swag init --parseDependency swag init mod go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct go mod download go mod vendor 导入包 集合导入包数据 import( \"fmt\" \"math/rand\" …… …… ) 包名 介绍 作用 fmt 基本包 用于输入输出 math 数学基本包 表内容 表内容 代码内容 "},"Golang/Function.html":{"url":"Golang/Function.html","title":"方法","keywords":"","body":"函数 函数名 作用 fmt.Println(String) 输出指定字符串 函数指定返回值 func 函数名(参数1，参数2 数据类型) (返回数据1,返回数据2 数据类型){ …… …… return } # example func add(x , y int) (y , x) { return } 函数值指定返回数据类型 func 函数名(参数1，参数2 数据类型) (返回数据1的类型,返回数据2的类型){ …… …… return 返回数据1 , 返回数据2 } # example func add(x , y int) (int , int) { return x + y , x } 函数返回值类型可以是func函数。 在函数中修改变量一般不影响全局的值，所以如果要改，必须传递一个指针进来，这个和C++相同 如果只返回一个返回数据，可以不写括号func 函数名(参数1，参数2 数据类型) 返回数据类型{……} 延迟函数 最后执行下面这个函数，多个defer的时候，是采用堆栈逻辑，原理是先进后出执行 defer 函数() 闭包 一个函数的返回值是一个函数。 原理：函数中回调一个子函数，可以理解为匿名函数，因为父函数被子函数依赖，所以其函数中定义的变量会一直存在内存中，每次调用函数后产生变化都是存在的。 可以把闭包理解为一个封装的环境中执行某个函数，每次定义一个变量存储这个环境，每次使用这个变量就是执行这个闭包中的子函数。 所以一般父函数中做的是环境定义，子函数做的是操作执行，如果定义两个变量，这两个变量中的值是相互不影响的。 对于执行的理解，可以是 f := function() 理解为执行父函数， f() 理解为执行子函数 func 函数名() func(参数类型) 返回值类型{ 相关操作1 return func(参数 参数类型) 返回值类型{ 相关操作2 return 返回值 } } # example func function() func() { a := 1 fmt.Println(\"只有第一次执行函数的时候才会触发\") return func(){ a ++ fmt.Println(\"每次执行这个函数都会执行，并且a变量值会一直存在\") } } # 定义一个变量存储这个函数 f := function() f() // 这就是执行一次闭包 闭包可以有值输入或输出 func function() func(int) int{ a := 1 fmt.Println(\"只有第一次执行函数的时候才会触发\") return func(x int) int{ a += x fmt.Println(\"每次执行这个函数吧输入的数加入\") return a } } # 定义一个变量存储这个函数 f := function() f(12) // 这就是执行一次闭包 变量 定义的所有变量都要被使用 ，否则会报错 变量类型设定 变量名1 变量类型1 , 变量名2 变量类型2 # 当变量类型相同的时候，等同如下 变量名1 , 变量名2 变量类型 # example x int , y int x , y int 定义变量 var 变量名1 , 变量名2 变量类型 # example var x , y bool 变量初始化赋值 var 变量名1 , 变量名2 变量类型 = 值1 , 值2 # 系统自动获取变量类型 var 变量名1 , 变量名2 = 值1 , 值2 # example var x , y int = 1 , 2 var x , y = 1 , 2 var ( x = 1 y = 2 ) 下面是简洁写法，但是不能在函数外使用 变量1 , 变量2 := 值1 , 值2 # example x , y := 1 , 2 变量类型 变量类型 含义 默认值 代表符号 bool 代表ture 或者 false false %t string 代表字符串 (空) %s int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr 整数类型 0 byte uint8 的别名 0 %d rune int32 0 %d float32 float64 浮点数 0 %f complex64 complex128 虚数 (0+0i) 特殊运算 > 所有二进制数向右移动n位 类型装换 表达式 T(v) 将值 v 转换为类型 T var i int = 42 var f float64 = float64(i) var u uint = uint(f) #string到int int,err:=strconv.Atoi(string) #string到int64 int64, err := strconv.ParseInt(string, 10, 64) #int到string string:=strconv.Itoa(int) #int64到string string:=strconv.FormatInt(int64,10) # byte到string str:=string(data) #string到float v2, err := strconv.ParseFloat(v, 64) 获取变量 test string flag.StringVar(&test, \"外部调用的名字\", \"默认值\", \"help提示文字\") flag.Parse() // 然后test变量就会通过外部获取值 解决没有输入参数的异常 if mip == \"Error\" || cip == \"Error\" || vip == \"Error\" { flag.Usage() return } 常量定义 const 常量1 , 常量2 = 值1 , 值2 # 可以大批量复制 指针 其零值是 nil *类型 指代某类型的指针 # example var i *int 那么 i 的值就是 nil ; 在不赋值去情况下使用 *i 会报告异常 循环 基本for循环 同C++的for for i := 初始值 ; i 初始值和数据变化模块不写 语法规则，同C++的while for i 死循环 for { } 用range和数组相结合 会遍历整个数组中所有元素，然后每次都会把一个数据给变量2，而变量1会每次+1 for 变脸1,变量2 := range 数组名{ …… …… } 变量1用来记录需要，可以不写 判断 if 判断语句 { } else { } 判断语句中可以有变量定义，例如： if err:=test();err != nil { } else { } switch - case switch i { case \"值1\": …… case 函数名(): …… defalut: …… } # "},"Golang/Structure.html":{"url":"Golang/Structure.html","title":"数据结构","keywords":"","body":"结构体 可以理解为一个自定义的数据类型 type 结构体名 struct{ 变量1 类型 变量2 类型 } # 使用方法 结构体.变量 结构体指针 结构体变量 := 结构体{值1,值2……} 指针名 := &结构体变量 # example a := add{1,2} b := &a b.x 的值就是1 go没有类的说法,但是可以就结构体进行函数方法的定义 语法类似于闭包，函数的返回值是一个函数。 func (结构体变量 结构体类型) 方法名() 返回值类型{ return 指定类型的值 } 结构体变量 := 结构体………… 结构体变量.方法名() # example type Vertex struct { X int Y int } func (v *Vertex) Abs() float64 { sum := v.X * v.X + v.Y * v.Y return math.Sqrt(float64(sum)) } func main() { v := Vertex{4,3} fmt.Println(v.Abs()) } 不光可以对自定义的结构体进行定义，也可以对数据类型，但是需要修改一个名字 type Vertex float func (v Vertex) Abs() float64 { return math.Sqrt(float64(v)) } 反射对象 var conf configJson // 反射对象configJson，遍历获取所有值 for i := 0; i 用于遍历一个对象内所有元素信息，进行相关操作 对象操作 // 为NatHostsMapType这个类定义Exist方法 func (m *NatHostsMapType) Exist(ht HostsTable) bool { m.Lock.Lock() defer m.Lock.Unlock() if _, isError := m.Data[ht.IP]; isError { return true } else { return false } } 数组 slice 其空值为 nil # 基本格式 数组名 []数据类型 # make创建一个数组格式 数组名 := make([]数据类型 , len初始值 ， cap初始值) # 新添加元素 数组名 = append(数组名,值1,值2) len默认值是0 , cap默认值是0 切片相关概念 len代表slice实际元素的个数； cap代表当前slice的容量 当len的长度不足够的时候，可以直接把数据存到容量中，如果达到初始设定容量，就会添加新加一个不比初始容量小的新容量，添加的容量无上限。 原则：cap>=len cap一定是偶数 cap要么和初始cap相同，要么是>=(cap初始值*2) 键名映射 一般和make连用，这个不要求有数据 数组名 = make(map[键名类型]数组类型) # 赋值的时候 数组名[任意键名] = 满足数组类型值 主要作用就是让数组的键名(下标)，可以被自定义 如果有数据 数组名 = map[键名类型]数组类型{ 键名1 : {值1 , 值2} 键名2 : {值1 , 值2} } 删除某键名的元素 delete(数组，键名) 查看某键名的元素是否存在 变量名 , 存储状态变量 := 数组名[键名] 变量名 , 存储状态变量 = 数组名[键名] # "},"Golang/Dealway.html":{"url":"Golang/Dealway.html","title":"特殊处理","keywords":"","body":"接口 接口类型是由一组方法定义的集合。 接口类型的值可以存放实现这些方法的任何值。 但是不需要完成接口内方法的具体内容。 type 接口名 interface{ 方法名() 方法返回值 } 日志处理 var InfoLog *log.Logger file, err := os.OpenFile(UpdateLog(LogFileName), os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666) if err != nil { log.Fatalln(UpdateLog(LogFileName) + \" 文件无法打开\") } InfoLog = log.New(file, \"\", log.Ldate|log.Ltime|log.Lshortfile) Json处理 json文件结构体 type json结构体名 struct { 代表名1(开头大写) string `json:\"json名\"` 代表名2(开头大写) int `json:\"json名\"` } 将string解读为json数据 // 解析json格式的string信息 func ReadStringToJson(body string) json格式 { var jsonfile json格式 if err := json.Unmarshal([]byte(body), &jsonfile); err != nil { log.Fatal(err.Error()) } return jsonfile } 创建一个json文件 jsonfile := json格式 { 代表名1: \"值\", 代表名2: 值, ... } 将json格式转化为string func (mj json格式) ReadJson() (string) { js, _ := json.Marshal(&mj) return string(js) } 断言处理，获取需要的Json数据 func ReadProjectJsonString(jsonData string) { var v interface{} if err := json.Unmarshal([]byte(jsonData), &v); err != nil { log.Fatalln(err) } data := v.(map[string]interface{}) data_2 := data[\"data\"].(map[string]interface{}) data_3 := data_2[\"data\"].([]interface{}) for k, v := range data_3 { fmt.Println(k, fmt.Sprintf(\"%v\",k)) } } 异常处理 if err := buildMha() ; err != nil { // 程序继续，中断函数 log.Panic(err) // 直接切断程序 log.Fatal(err) } 写文件 覆盖写 err := ioutil.WriteFile(\"test.txt\", []byte(\"Hi\\n\"), 0666) if err != nil { log.Fatal(err) } 追加写 func myWrite(config string, word ...string) error { for _, i := range word { f, err := os.OpenFile(config, os.O_WRONLY, 0644) if err != nil { fmt.Println(\"cacheFileList.yml file create failed. err: \" + err.Error()) return errors.New(i) } else { // 查找文件末尾的偏移量 n, _ := f.Seek(0, os.SEEK_END) // 从末尾的偏移量开始写入内容 _, err = f.WriteAt([]byte(i+\"\\n\"), n) } _ = f.Close() if err != nil { fmt.Println(\"cacheFileList.yml file writed failed. err: \" + err.Error()) return errors.New(i) } } return nil } # "},"Golang/Linux.html":{"url":"Golang/Linux.html","title":"命令操作","keywords":"","body":"Linux ssh连接服务器 func connect(user, password, host, key string, port int, cipherList []string) (*ssh.Session,*ssh.Client, error) { var ( auth []ssh.AuthMethod addr string clientConfig *ssh.ClientConfig client *ssh.Client config ssh.Config session *ssh.Session err error ) // get auth method , 用秘钥或者密码连接 auth = make([]ssh.AuthMethod, 0) if key == \"\" { auth = append(auth, ssh.Password(password)) } else { pemBytes, err := ioutil.ReadFile(key) if err != nil { return nil, nil, err } var signer ssh.Signer if password == \"\" { signer, err = ssh.ParsePrivateKey(pemBytes) } else { signer, err = ssh.ParsePrivateKeyWithPassphrase(pemBytes, []byte(password)) } if err != nil { return nil,nil, err } auth = append(auth, ssh.PublicKeys(signer)) } if len(cipherList) == 0 { config = ssh.Config{ Ciphers: []string{\"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\", \"arcfour256\", \"arcfour128\", \"aes128-cbc\", \"3des-cbc\", \"aes192-cbc\", \"aes256-cbc\"}, } } else { config = ssh.Config{ Ciphers: cipherList, } } clientConfig = &ssh.ClientConfig{ User: user, Auth: auth, Timeout: 30 * time.Second, Config: config, HostKeyCallback: func(hostname string, remote net.Addr, key ssh.PublicKey) error { return nil }, } // ssh 连接 addr = fmt.Sprintf(\"%s:%d\", host, port) if client, err = ssh.Dial(\"tcp\", addr, clientConfig); err != nil { return nil,nil, err } // create session if session, err = client.NewSession(); err != nil { return nil, client , err } modes := ssh.TerminalModes{ ssh.ECHO: 0, // disable echoing ssh.TTY_OP_ISPEED: 14400, // input speed = 14.4kbaud ssh.TTY_OP_OSPEED: 14400, // output speed = 14.4kbaud } if err := session.RequestPty(\"xterm\", 80, 40, modes); err != nil { return nil,nil, err } return session, client ,nil } const ( username = \"root\" password = \"\" key = \"/root/.ssh/id_rsa\" port = 22 ) func sshDoShell(ip string, cmd string) error{ ciphers := []string{} session, client, err := connect(username, password, ip, key, port, ciphers) if err != nil { fmt.Println(\"连接 \", ip, \" 异常\") log.Fatal(err) } defer func() { if err := session.Close(); err != nil { // log etc } }() defer func() { if err := client.Close(); err != nil { // log etc } }() session.Stdout = os.Stdout session.Stderr = os.Stderr err = session.Run(cmd) if err != nil{ return errors.New(err.Error()) } return nil } 执行shell命令 func myCmd(bash string, shell ...string) error { contentArray := make([]string, 0, 5) cmd := exec.Command(bash, shell...) stdout, err := cmd.StdoutPipe() if err != nil { fmt.Println(cmd.Stderr, \"error=>\", err.Error()) } _ = cmd.Start() reader := bufio.NewReader(stdout) contentArray = contentArray[0:0] var index int //实时循环读取输出流中的一行内容 for { line, err2 := reader.ReadString('\\n') if err2 != nil || io.EOF == err2 { break } fmt.Print(line) index++ contentArray = append(contentArray, line) } err = cmd.Wait() if err != nil { fmt.Printf(\"Execute Shell %s: \", shell) return errors.New(\"failed with error:\"+err.Error()) } return nil } 基于http协议的API接口实现 var ListenSig = make(chan int) type Route struct { Name string Method string Pattern string HandlerFunc http.HandlerFunc } type Routes []Route // 记录访问记录 func Logger(inner http.Handler, name string) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { start := time.Now() inner.ServeHTTP(w, r) File.WriteAccessLog(r.Method+\"\\t\"+r.RequestURI+\"\\t\"+name+\"\\t\"+time.Since(start).String()) }) } // 书写路由信息 func NewRouter() *mux.Router { router := mux.NewRouter().StrictSlash(true) for _, route := range routes { var handler http.Handler handler = route.HandlerFunc handler = Logger(handler, route.Name) router. Methods(route.Method). Path(route.Pattern). Name(route.Name). Handler(handler) } return router } var routes = Routes{ // 获取指定日期的监控信息 Route{ \"GetInfo\", \"GET\", \"/monitor/info\", ReturnMonitorInfo, }, // 收集监控数据并保存处理 Route{ \"MonitorCollect\", \"POST\", \"/monitor/collect\", PostMonitorInfo, }, } // 具体接口触发函数 func PostMonitorInfo(w http.ResponseWriter, r *http.Request) { } func ReturnMonitorInfo(w http.ResponseWriter, r *http.Request) { } // 启动api接口，port参数为暴露端口 func StartApi(port string) { router := NewRouter() File.WriteErrorLog(http.ListenAndServe(\":\"+port, router).Error()) ListenSig "},"Golang/Test.html":{"url":"Golang/Test.html","title":"单元测试","keywords":"","body":"go test 单元测试 go test -v ./... 读取目录下所有*_test.go文件，运行里面的test任务 每个包，都是从*Test.M出发 package api func TestMain(m *testing.M) { fmt.Println(\"Start test Api\") // 开始测试 m.Run() // 测试结束 fmt.Println(\"Finish test Api \") } func TestPostProjects(t *testing.T) { convey.Convey(\"测试\", t, func() { // start api and test convey.So(get_body, convey.ShouldEqual, right_body) }) } Mock方法 sqlMock goMock gomonkey gomonkey.ApplyFunc： mock某个方法 gomonkey.ApplyMethod： mock某个类的方法 xxx.Reset()： 重置各个方法 package api // 定义各个测试数据类型 var ( // 作为测试中传入的config值，这些信息会被mock掉 Api_test_cfg config.OctopusServerConfig // 作为测试中使用的project表信息 Api_test_projects []*mysql.Project ) func TestMain(m *testing.M) { // 启动api准备测试 patches := mockMysql() fmt.Println(\"Start test Api\") // 开始测试 m.Run() // 测试结束 for _, p := range patches { p.Reset() } fmt.Println(\"Finish test Api \") } // mock mysqlservice的相关操作 func mockMysql() map[string]*gomonkey.Patches { var ( // 作为数据库mock使用的对象 test_sql *mysql.Mysql patches = make(map[string]*gomonkey.Patches) ) // mock mysql func patches[\"GetMysqlInstance\"] = gomonkey.ApplyFunc(mysql.GetMysqlInstance, func(_ *config.DataSourceDetail) (*mysql.Mysql, error) { var dbConn *gorm.DB mysqlInstance := &mysql.Mysql{DbConn: dbConn} return mysqlInstance, nil }) // mock mysql method patches[\"GetProjects\"] = gomonkey.ApplyMethod(reflect.TypeOf(test_sql), \"GetProjects\", func(_ *mysql.Mysql) (interface{}, error) { return Api_test_projects, nil }) return patches } httptest 测试api接口的单元测试方法 package api // 定义各个测试数据类型 var ( // 作为测试中传入的config值，这些信息会被mock掉 Api_test_cfg config.OctopusServerConfig // api接口的使用对象 Apptest *iris.Application ) func TestMain(m *testing.M) { // 启动api准备测试 Apptest = CreateApi(&Api_test_cfg) fmt.Println(\"Start test Api\") // 开始测试 m.Run() // 测试结束 fmt.Println(\"Finish test Api \") } func TestPostProjects(t *testing.T) { convey.Convey(\"测试 post /projects\", t, func() { // start api and test e := httptest.New(t, Apptest) getAccess := e.POST(\"/projects\").WithHeader(\"traceid\", \"xxxx\").WithJSON(\"body\"). WithBasicAuth(Auth.Username, Auth.Password). Expect().Status(httptest.StatusOK) getAccess.Body().Equal(\"\") }) } Faker 随机生成相关参数，可以通过print dir(fake)，下面是相关列表 address : 962 Brown Mountain East Mary, CT 04738 am_pm : PM ascii_company_email : dawnhines@cantrell.com ascii_email : richardsanna@yahoo.com ascii_free_email : ejohnson@yahoo.com ascii_safe_email : steven92@example.org bank_country : GB bban : XRKR3466353844591 boolean : False bothify : 16 zD bs : harness cross-media web-readiness building_number : 2202 catch_phrase : Quality-focused solution-oriented hierarchy century : XII chrome : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_0) AppleWebKit/5352 (KHTML, like Gecko) Chrome/40.0.802.0 Safari/5352 city : New Lisa city_prefix : Lake city_suffix : town color_name : Purple company : Gray and Sons company_email : martinallen@johnson.net company_suffix : and Sons coordinate : -87.141470 country : Northern Mariana Islands country_code : SO credit_card_expire : 12/27 credit_card_full : VISA 19 digit Adam Murphy 4436102807805944284 02/22 CVC: 607 credit_card_number : 3508735520995723 credit_card_provider : American Express credit_card_security_code : 129 cryptocurrency : ('BC', 'BlackCoin') cryptocurrency_code : DRC cryptocurrency_name : EOS.IO currency : ('RWF', 'Rwandan franc') currency_code : CHF currency_name : São Tomé and Príncipe dobra date : 2017-03-08 date_between : 2004-09-09 date_between_dates : 2019-01-02 date_object : 2016-06-06 date_of_birth : 1989-05-07 date_this_century : 2016-07-27 date_this_decade : 2015-06-18 date_this_month : 2019-01-01 date_this_year : 2019-01-01 date_time : 1998-05-01 17:23:46 date_time_ad : 0381-09-12 09:49:54 date_time_between : 2004-01-05 11:45:01 date_time_between_dates : 2019-01-02 20:42:43 date_time_this_century : 2008-12-05 18:31:25 date_time_this_decade : 2012-08-18 21:45:49 date_time_this_month : 2019-01-01 22:56:29 date_time_this_year : 2019-01-02 02:34:05 day_of_month : 09 day_of_week : Tuesday domain_name : mendoza.biz domain_word : zavala ean : 4633017886662 ean13 : 1212638242694 ean8 : 00511063 ein : 27-4912026 email : ruizpeter@hotmail.com file_extension : wav file_name : close.jpg file_path : /authority/section.mp4 firefox : Mozilla/5.0 (Windows NT 5.2; mn-MN; rv:1.9.1.20) Gecko/2016-07-12 09:28:12 Firefox/3.6.4 first_name : Brian first_name_female : Emily first_name_male : Robert free_email : toddedward@gmail.com free_email_domain : yahoo.com future_date : 2019-01-12 future_datetime : 2019-01-27 11:39:59 get_providers : [, , , , , , , , , , , , , , , , , , , , , ] hex_color : #63efde hexify : 333f hostname : srv-88.campbell.com iban : GB33UOJP7722297851032 image_url : https://placeimg.com/47/982/any internet_explorer : Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.1) ipv4 : 192.53.46.149 ipv4_network_class : a ipv4_private : 10.11.77.107 ipv4_public : 98.36.178.232 ipv6 : 9171:502a:4187:a38b:cab:2ae5:a008:3537 isbn10 : 1-84636-208-3 isbn13 : 978-1-80668-720-6 iso8601 : 1981-11-27T00:10:05 itin : 980-73-6362 job : Environmental health practitioner language_code : ha last_name : Harrison last_name_female : Dean last_name_male : Washington latitude : -71.7117395 latlng : (Decimal('-87.243354'), Decimal('68.383566')) lexify : ynqd license_plate : 04XI233 linux_platform_token : X11; Linux x86_64 linux_processor : i686 local_latlng : ('30.5427', '-97.54667', 'Hutto', 'US', 'America/Chicago') locale : tk_TM location_on_land : ('18.51957', '73.85535', 'Pune', 'IN', 'Asia/Kolkata') longitude : -149.969067 mac_address : f7:42:08:e8:c9:a5 mac_platform_token : Macintosh; PPC Mac OS X 10_6_3 mac_processor : U; Intel md5 : 7e7cb2e1d96aa3ea8af015bd7d21ae3c military_apo : PSC 3000, Box 1879 military_dpo : Unit 8330 Box 5496 military_ship : USNV military_state : AA mime_type : multipart/signed month : 07 month_name : August msisdn : 3162686718629 name : Melissa Gonzalez name_female : Annette Norton name_male : Justin Martinez null_boolean : True numerify : 110 opera : Opera/8.67.(X11; Linux i686; mai-IN) Presto/2.9.166 Version/10.00 paragraph : Less huge partner herself. Major career personal sort western impact. paragraphs : [u'Tonight else fear doctor. Radio past event garden.', u'Series technology section capital hundred go choice.', u'Large month resource concern Mr form machine. Simple site however watch.'] password : _NJnqyB+o8 past_date : 2018-12-03 past_datetime : 2018-12-29 23:03:20 phone_number : 001-810-068-3558x30683 postalcode : 63294 postalcode_plus4 : 24817-9240 postcode : 36965 prefix : Miss prefix_female : Miss prefix_male : Mr. profile : {'website': [u'http://knox.com/', u'https://hall-james.com/', u'https://gibbs.com/', u'http://gonzalez-pacheco.biz/'], 'username': u'hensonana', 'name': u'Timothy Strickland', 'blood_group': 'A+', 'residence': u'50459 April Dale\\nNorth Jasmine, IL 92057', 'company': u'Hays, Mcdonald and Costa', 'address': u'9407 Donna Summit\\nAnnetteville, WY 18513', 'birthdate': datetime.date(1980, 12, 19), 'sex': 'M', 'job': 'Engineer, site', 'ssn': u'170-61-7134', 'current_location': (Decimal('-42.5555445'), Decimal('42.848347')), 'mail': u'janetwalsh@gmail.com'} pybool : False pydecimal : -88679.375 pydict : {u'try': u'arthurday@hotmail.com', u'attorney': u'https://davis-shepherd.org/', u'beyond': u'AHMeTAiybSObDygFLCdP', u'make': Decimal('8.9'), u'sign': u'ugHKkPrnstWEoDyEWvmx', u'should': 9959, u'project': Decimal('-924424356.274'), u'born': u'kenHkltRzSJhjBZmvRaT', u'oil': u'xCFyZuRlAKZrvYkpSqxg', u'each': Decimal('61.99'), u'arrive': u'dHyljteKscrRHmswyaZU', u'minute': u'uZRBiOfKafHJcaaKXZXM'} pyfloat : -7651023230.8 pyint : 3534 pyiterable : [u'VHLKqNIghXURLCTtpzRn', Decimal('6012.9444191'), -35834818801.4104, 6171, Decimal('-12265352.2901'), 3595, u'https://www.salinas.biz/category.php', u'tmullen@harris.biz', datetime.datetime(2014, 6, 24, 0, 55, 42), -93.696436254134, u'NHntgKLcrlNkmEzlgNAR'] pylist : [u'jose07@yahoo.com', u'BgAbucmgaDtzDNkWHZxA', u'BGHXEbOTzWesohqDvSvd', datetime.datetime(1996, 7, 15, 11, 51, 9), u'rWVgMmfqZPaHMvIKXqbR', u'zachary98@yahoo.com', u'aPYhQZYdfMWLbegYpTrX', u'LBlIvbwnXKmfLscVFmyu', u'http://www.brown.com/homepage/', 2009, u'terri30@stafford-barnett.biz'] pyset : set([u'vtURKBQQRApIoUZROrll', 1105, u'jalvarado@gmail.com', u'QmqPChxAQibTqClxJhuD', datetime.datetime(2002, 8, 15, 23, 1, 56), Decimal('6.968001051'), 3837655878192.6, u'benjaminholloway@clark.com', -6306.918624, 3190, Decimal('-25374593628.5'), u'lgnXmYBtXNzCKpVvCYrb', Decimal('-33897542.763')]) pystr : LqxqCNVABxSlGFNkvrlx pystruct : ([u'jjkLtZqEljABLAkzTfUt', datetime.datetime(2008, 10, 8, 1, 50, 36), u'ZjEpHkuuMBAZkaBhQyrU', u'OilUAUmcThgkcxMbqSAh', datetime.datetime(1975, 7, 5, 0, 36, 55), u'fOJrQchzyPhFxqMdGMnE', 9250, 8949, u'sleWkpsNBMihVkGpRoot', Decimal('807164941.401')], {u'begin': u'BjbPTjfUvVfKcGiJMNQD', u'necessary': u'FzOHQMomtEMTgadZmixE', u'show': Decimal('53203338.7976'), u'country': u'swfMuAlLcqRLksRZwlyU', u'understand': u'lisalewis@mckay.org', u'rock': 9670.5514, u'close': 5565, u'east': 102813994221205.0, u'my': u'yPyrXsPeXixbldFbWhFU', u'those': u'efry@hotmail.com'}, {u'product': {4: u'patrickparker@hotmail.com', 5: [u'qCHqzUfasGcUMKjUhkLc', u'FxwucZAfcnYxrhqOOtXR', -395.803], 6: {4: u'aLqAwymVaNpmhyHhQOLH', 5: u'ErfioxhgoWNVCdnaVanq', 6: [u'RlnaSIsbWnKfaPViBLNj', u'jbTTgCCjCEtuzGodHAdV']}}, u'could': {0: u'RgwNMAMzXKlHhazdfhCX', 1: [u'EAUsPCgHgoQDJcblUCja', datetime.datetime(2012, 1, 19, 13, 35, 8), u'http://walters.org/explore/wp-content/app/author.htm'], 2: {0: u'lwPTuQsvNnCUPBBTffno', 1: u'eXQMtXfRtlBJfpVFAUjg', 2: [u'ECOKoifYhSzLoifZdWnl', u'https://johnson.net/category.html']}}, u'term': {8: datetime.datetime(2010, 1, 9, 12, 24, 49), 9: [datetime.datetime(2005, 11, 13, 14, 10, 18), 6119, u'rzsUSoLRotLlQSjzaskb'], 10: {8: u'belinda84@hotmail.com', 9: datetime.datetime(1997, 3, 10, 4, 46, 15), 10: [Decimal('663.0'), Decimal('6.83132854674E+13')]}}, u'environment': {1: u'qbWPXDBMWzHZELWxQBuz', 2: [6074, 3400, u'eHYTsFimBxNJryhThDNc'], 3: {1: datetime.datetime(1984, 4, 17, 4, 38, 31), 2: u'VhigpvUUAfCHutXcwfbX', 3: [u'UAjJhtniSwdhayTOLWEq', u'NrYZWiQYFJZMYmxiRLww']}}, u'rich': {9: u'UxqyzUuWWYhlsbfWtBPa', 10: [u'VvsHEFsWBmxlVzeCKMIX', 4015, datetime.datetime(1987, 5, 8, 6, 28, 31)], 11: {9: datetime.datetime(1994, 12, 29, 22, 3, 29), 10: u'IeVrPuRMbVQPQLpnXodo', 11: [u'YKUAepdkQNykJLtiEmeH', Decimal('86832605439.3')]}}, u'into': {8: [u'WFkKXgCihEjoMxPMpKiB', -371.213906693373, u'dbrowning@yahoo.com'], 9: {8: u'melissa96@hotmail.com', 9: [u'adamstammy@hotmail.com', 4613], 7: Decimal('-870.723488439')}, 7: u'https://anderson.com/'}, u'skill': {5: u'ZcQKPbNrKTKerNTBcOUu', 6: [1294, Decimal('532156.674'), 247], 7: {5: u'ZDVnfVsiIkWhZRhwhElc', 6: 3777, 7: [u'basssusan@barnett.com', u'gTRgZifCkCkKVgAoSuqm']}}, u'democratic': {2: u'https://gonzalez-dean.com/', 3: [u'millerrachel@schneider.com', u'FkpbQxHdbGinsxifzjLo', u'IPhyirwsceVwTKNpduNW'], 4: {2: u'AOOVvMWWxDyWBFYqZPZq', 3: u'PHdenfFfHQzsHrqmFFNJ', 4: [datetime.datetime(2006, 12, 10, 10, 21, 14), 7330]}}, u'themselves': {8: {8: [u'william87@yahoo.com', u'YRoBtIsJwgGXcuvpIJPj'], 6: 1245, 7: u'ygriffin@smith-rowe.com'}, 6: u'jefferyhall@yahoo.com', 7: [u'qherrera@hunt.info', u'andrewharvey@gmail.com', u'http://brown.info/list/wp-content/author/']}, u'today': {3: u'btSTHtwKXrLHvLpFKOVZ', 4: [u'https://www.ramirez.com/faq.php', u'dpsAElcgRCbovSDyVvdd', u'https://mcintosh-swanson.com/main/search/tag/terms/'], 5: {3: 9055, 4: datetime.datetime(1971, 7, 28, 12, 33, 9), 5: [u'danielhodges@fisher.com', u'EfuYhbcQKCQcptDTlmhM']}}}) random_choices : ['c'] random_digit : 6 random_digit_not_null : 8 random_digit_not_null_or_empty : 6 random_digit_or_empty : random_element : b random_elements : ['a'] random_int : 7153 random_letter : v random_letters : ['u', 'e', 'a', 'y', 'E', 'A', 'm', 'R', 'k', 'm', 'G', 'o', 'q', 's', 'l', 'O'] random_lowercase_letter : c random_number : 60 random_sample : ['b', 'a', 'c'] random_uppercase_letter : E randomize_nb_elements : 13 rgb_color : 207,33,21 rgb_css_color : rgb(141,14,63) safari : Mozilla/5.0 (Windows; U; Windows NT 6.0) AppleWebKit/535.12.3 (KHTML, like Gecko) Version/5.0 Safari/535.12.3 safe_color_name : olive safe_email : martinkayla@example.org safe_hex_color : #bb2200 secondary_address : Suite 437 seed : None seed_instance : sentence : Couple race sit sing TV. sentences : [u'Surface seem serve five each magazine.', u'Statement current line share force prevent company.', u'Daughter listen fear miss.'] "},"Golang/Captcha.html":{"url":"Golang/Captcha.html","title":"验证码","keywords":"","body":"数据存储 Redis 操作 type RedisStore struct { sync.RWMutex expiration time.Duration redisInstance *redis.Client } func NewRedisStore(expiration time.Duration, redisInstance *redis.Client) (r *RedisStore) { r = &RedisStore{ expiration: expiration, redisInstance: redisInstance, } return } func (this *RedisStore) Set(id string, value string) { this.Lock() defer this.Unlock() this.redisInstance.Set(context.Background(), id, value, this.expiration) } func (this *RedisStore) Verify(id, answer string, clear bool) bool { return this.Get(id, clear) == answer } func (this *RedisStore) Get(id string, clear bool) (value string) { this.RLock() defer this.RUnlock() var err error value, err = this.redisInstance.Get(context.Background(), id).Result() if err != nil { logger.Log.Errorf(\"从redis中获取 key `%s` 失败, %s\", id, err) return } if clear { this.redisInstance.Del(context.Background(), id) } return } Captcha 验证码 package api import ( \"github.com/kataras/iris/v12\" \"github.com/mojocn/base64Captcha\" \"image/color\" \"math/rand\" \"time\" ) var ( fonts = []string{\"DENNEthree-dee.ttf\", \"RitaSmith.ttf\", \"actionj.ttf\", \"chromohv.ttf\", \"wqy-microhei.ttc\"} defaultDigit = [...]interface{}{ base64Captcha.NewDriverDigit(80, 200, 4, 0.7, 80), base64Captcha.NewDriverString(80, 200, 0, base64Captcha.OptionShowHollowLine, 4, base64Captcha.TxtAlphabet, &color.RGBA{0, 0, 0, 0}, fonts), base64Captcha.NewDriverMath(80, 200, 0, 0, &color.RGBA{0, 0, 0, 0}, fonts), } ) func GetCaptcha() (string, string){ // 创建redis存储 store := NewRedisStore(5*time.Minute, redis.GetRedisInstance()) driver := defaultDigit[rand.Intn(len(defaultDigit))].(base64Captcha.Driver) captcha := base64Captcha.NewCaptcha(driver, store) uuid, b64s, err := captcha.Generate() if err != nil { CaptchaErr(ctx, err, response) return \"\", \"\" } return uuid, b64s } func validateCaptcha(key, value string) (validated bool) { if key == \"\" || value == \"\" { return } // 读取redis存储 store := NewRedisStore(5*time.Minute, redis.GetRedisInstance()) validated = store.Verify(key, value, true) return } "},"Golang/PrometheusExporter.html":{"url":"Golang/PrometheusExporter.html","title":"普罗米修斯","keywords":"","body":"数据存储 Redis 操作 type RedisStore struct { sync.RWMutex expiration time.Duration redisInstance *redis.Client } func NewRedisStore(expiration time.Duration, redisInstance *redis.Client) (r *RedisStore) { r = &RedisStore{ expiration: expiration, redisInstance: redisInstance, } return } func (this *RedisStore) Set(id string, value string) { this.Lock() defer this.Unlock() this.redisInstance.Set(context.Background(), id, value, this.expiration) } func (this *RedisStore) Verify(id, answer string, clear bool) bool { return this.Get(id, clear) == answer } func (this *RedisStore) Get(id string, clear bool) (value string) { this.RLock() defer this.RUnlock() var err error value, err = this.redisInstance.Get(context.Background(), id).Result() if err != nil { logger.Log.Errorf(\"从redis中获取 key `%s` 失败, %s\", id, err) return } if clear { this.redisInstance.Del(context.Background(), id) } return } Captcha 验证码 package api import ( \"github.com/kataras/iris/v12\" \"github.com/mojocn/base64Captcha\" \"image/color\" \"math/rand\" \"time\" ) var ( fonts = []string{\"DENNEthree-dee.ttf\", \"RitaSmith.ttf\", \"actionj.ttf\", \"chromohv.ttf\", \"wqy-microhei.ttc\"} defaultDigit = [...]interface{}{ base64Captcha.NewDriverDigit(80, 200, 4, 0.7, 80), base64Captcha.NewDriverString(80, 200, 0, base64Captcha.OptionShowHollowLine, 4, base64Captcha.TxtAlphabet, &color.RGBA{0, 0, 0, 0}, fonts), base64Captcha.NewDriverMath(80, 200, 0, 0, &color.RGBA{0, 0, 0, 0}, fonts), } ) func GetCaptcha() (string, string){ // 创建redis存储 store := NewRedisStore(5*time.Minute, redis.GetRedisInstance()) driver := defaultDigit[rand.Intn(len(defaultDigit))].(base64Captcha.Driver) captcha := base64Captcha.NewCaptcha(driver, store) uuid, b64s, err := captcha.Generate() if err != nil { CaptchaErr(ctx, err, response) return \"\", \"\" } return uuid, b64s } func validateCaptcha(key, value string) (validated bool) { if key == \"\" || value == \"\" { return } // 读取redis存储 store := NewRedisStore(5*time.Minute, redis.GetRedisInstance()) validated = store.Verify(key, value, true) return } "},"Python/":{"url":"Python/","title":"Python","keywords":"","body":"Python 基础 "},"Python/Basis.html":{"url":"Python/Basis.html","title":"基础","keywords":"","body":"总纲 python和yaml文件有些类似，缩进严格对齐，对于循环判断的控制影响范围就是根据空格缩进，一个缩进属于同一个级别。 变量 变量名 = 变量值 使用的时候直接用变量名代表即可 全局变量 global 变量名 主要是在函数中使用，让函数中操作的数可以在函数外使用 字典 {'key名1': '具体值1' ，'key名2': '具体值2' } # 调用的方法 设定一个变量d 存储这些字典值，在调用的时候 d[key名]就是key对应的具体值 类似json格式的数据存储格式， 使用del删除字典中的元素：del d[key名] 判断key名是否存在自低昂中：\"key名\" in d 循环与判断 if ( 判断命令 ): 成功后执行的 else: 失败后执行的 while 判断 : 成功后执行的 else: 失败后执行的 for i in 列表: i一次获取列表中的值并执行 else: i取完列表中所有值 生成连续数 rannge([起始数值,]停止数值[,步长]) 起始数值不一定比停止数值大，可以是降序排列， 起始数值默认是0，步长默认也是0 终断循环 continue 停止本次循环的后续命令，但是循环依旧进行 break 本次循环的后续命令，并停止所有循环操作 函数 定义函数 def 函数名( 形参1 = 默认值 ，形参2 , *不定长度形参 ， **字典式形参 ) : 执行的命令 # 调用方法 函数名(实参1，实参2,**{\"字典式实参名1\":\"具体值1\"，\"字典式实参名2\":\"具体值2\"}) 函数名(*(所有实参组成的元组)) 如果没有设定默认值，那么实参个数必须和形参个数完全一致 如果设置一个形参的默认值就要全部都设定默认值 所有实参组成的元组可以是一个变量，赋值后放入 不定长形参会获取除去前面设定个数的参数外的所有实参(不包括字典格式类型的数据) 特殊用法 # 先调用，再使用函数控制时间 import time time.sleep(1) "},"Git/":{"url":"Git/","title":"Git","keywords":"","body":"GIT 原理 操作 修改内容 历史 分支 远端 子模块 "},"Git/Principle.html":{"url":"Git/Principle.html","title":"原理","keywords":"","body":"Git的操作原理 介绍 一个gitlib服务器有远程的分支以及存储设备，客户端操作，首先是从远端分支将数据下载到本地分支，然后进行修改、添加、删除的相关操作，随后在本地的分支中进行一次添加暂存提交的操作，再将分支推送上传到远端服务器，最后进行多分支合并操作。 分支 对于分支，可以理解为创建一个账户，每个不同的分支都是不同的修改进度，但最后都要进行合并操作，合并到主线中，也就是master分支，这个分支在大部分情况下会有push限制，不允许进行push覆盖操作，只可以合并操作。 在本地git仓库中，HEAD是一个指针，他指的就是当前用户所在的分支，下面的所有操作在不具体的指定情况下，全部是在修改这个分支的内容。 逻辑 远程分支下载到本地分支 --> 本地文件修改 --> 本地暂存并提交 --> 上传到远端并请求合并 --> 远端合并分支 总结 用户在操作的时候，一般是在远端开创一个自己的分支，然后下载到本地进行修改，然后通过一系列操作推送到远端，远端进行数据整合，最后回归主线。 "},"Git/Operation.html":{"url":"Git/Operation.html","title":"操作","keywords":"","body":"Git的基本操作 克隆远端的git仓库到本地 git clone .../*.git 这一般是第一步操作，把远端数据拷贝到本地，然后进行相关操作。 查看文件状态 git status 出现如下，代表发现有个未暂存本地的文件 Untracked files: (use \"git add ...\" to include in what will be committed) 出现如下，代表发现文件已经暂存到本地了 Changes to be committed: (use \"git rm --cached ...\" to unstage) 比较简单的查看文件状态 git status -s 这个比较简单： 看到??代表一个新的文本，还没有暂存本地分支。 看到A代表已经暂存到本地分支了，但是没有提交。 看到M说明没有暂存到本地分支。 看到D说明文件以及被删除或被移到分支存储位置外。 看到R说明文件修改了位置或者修改了名字 如果有AM那么说明是暂存后又发生了修改，需要再次暂存该文件。 文件暂存和取消 git add 文件名 ## 将文件暂存 git reset 文件名 ## 取消文件的暂存 文件暂存是每次必须进行的操作，新建文件或者修改文件都需要先暂存文件。 查看文件修改情况 查看没有暂存到本地的文件和现在的文件有哪些修改的部分 git diff 查看当前暂存到本地的文件和远端存储的原件有哪些修改部分 git diff --staged 提交更新 这是将文件提交到本地磁盘完成存储 git commit -m '提交的相关信息' 可以跳过 add 步骤，直接编辑文件后提交到本地 git commit -m '提交的相关信息' -a 添加后就会发现文件状态没了，因为已经存到磁盘中了。 "},"Git/Change.html":{"url":"Git/Change.html","title":"修改内容","keywords":"","body":"Git修改文本内容 增删改都属于修改文本，赠包括新建文本、文本添加内容，删包括删除文本、删除文本内容，改包括修改文本位置、修改文本内容。 在此提醒一个注意事项，在修改了git分支的操作后必须要提交，只有当status没有数据的时候才算写完了。 增删改文本内容、新建文本 修改完文件，需要先暂存add本地，再提交commit到本地分支。 删除文本 删除本地文本后，我们会发现status得到的结构是 D ，那么我们就需要从git体系中删除 git rm 文件名 git rm -f 文件名 ## 将暂存区中的文件内容也会删除 要注意，本地文件修改存储位置，以及重命名都会当做是删除了一个文本，创建了一个新的文本，git中移动文件和修改文件名，需要用特殊的方法。 除了我们手动产出本地文件外，也可以通过git rm 文件的方法，这样本地文件，和git本地分支文件都会被删除 移动文本、修改文本名 这个是根据linux的操作特点，移动文本，可以指定移动后的文件名，这样也就可以实现修改文本名，不过需要进行提交操作 git mv 原文件地址/名字 新文件地址/名字 git commit -m '提交修改位置(名字)' "},"Git/History.html":{"url":"Git/History.html","title":"历史","keywords":"","body":"Git查看历史消息 查看提交历史 git log git log -p ## 显示历史提交对文件的变化情况 git log -p -数字n ## 查看最近的n次提交中的文件变化情况 查看所有分支的提交历史 (注意最新的提交在上面) git log --oneline --decorate --graph --all 进行撤销操作 git reset HEAD 文件 ## 将上一次的git操作撤回 git checkout -- 文件 ## 真正对文件有作用的撤销操作 这里建议，通git status查看该如何撤销，一般在文件上方都会写如何撤销该操作 "},"Git/Branch.html":{"url":"Git/Branch.html","title":"分支","keywords":"","body":"Git分支操作 查看当前所在分支 git branch * + 绿色字体 的那个分支就是当前所在分支 查看各个分支的同步情况 git branch -vv 查看每个分支现在的情况，如果需要同步远端的文件使用git pull origin master 创建分支 git branch 分支名 ## 注意这只是创建新的分支，不会切换分支 git checkout -b 分支名 ## 创建新的分支并且切换到新分支 切换分支 git checkout 分支名 这就是将HEAD指针指向新的分支，然后下面的所有操作都是对该分支进行的操作 删除分支 git branch -d 分支名 注意：这里删除分支的前提必须是，该分支已经合并到了master中 指定分支跟踪 当克隆一个仓库时，它通常会自动地创建一个跟踪origin/master的master分支 git checkout -b 创建到本地的分支 origin/远程分支 创建一个本地分支，一直跟踪一个远端分支，这个的主要作用是git pull后面不用跟参数了而已 "},"Git/Origin.html":{"url":"Git/Origin.html","title":"远端","keywords":"","body":"Git远端的相关操作 查看远端仓库的相关信息 git remote -v git remote show origin ## 查看当前如果和远端进行推送、拉取等操作的缩写命令的含义 将本地分支推送至远端分支 git push origin master:分支名 将远端分支同步到本地 git pull origin master(或者其他分支) 一般同步数据都是同步master的文件内容 "},"Git/Submodule.html":{"url":"Git/Submodule.html","title":"子模块","keywords":"","body":"Submodule 介绍 有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。 我们举一个例子。 假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。 你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。 如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。 Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。 创建 git submodule add https://URL 下载 git submodule init git submodule update 修改 vim .gitsubmodule vim .git/config git submodule sync "},"Markdown/":{"url":"Markdown/","title":"超文本","keywords":"","body":"超文本 Markdown Adoc "},"Markdown/markdown.html":{"url":"Markdown/markdown.html","title":"Markdown","keywords":"","body":"标题 一级标题 ==== 二级标题 ---- ##二级标题 ####小标题 最多只有6个级别 粗斜体 *斜体文本* _斜体文本_ **粗体文本** __粗体文本__ ***粗斜体文本*** ___粗斜体文本___ ~~删除文本~~ * 和 _ 一样的作用，依照个数进行不同的选择操作 链接 网址链接 [链接名称](http://链接网址) 引用 > 引用的话 可以换行继续操作，换行默认会自动在开头添加 > 只要中间没有中断那么引用也不会断 制表 | 该列表头 | 该列表头 | 该列表头 | |:------------- |:---------------:| -------------:| | 表内容 | 表内容 | 表内容 | | 表内容 | 表内容 | 表内容 换行内容| | 表内容 | 表内容 | ```代码内容``` | | Column 1 | Column 2 | Column 3 | |:------------- |:--------:| -------------:| | centered 文本居左 | centered 文本居中 | right-aligned 文本居右 | 分隔符 --- 在文本中需要分隔符的地方输入即可 符号转义 如果你的描述中需要用到 markdown 的符号，比如 # * 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 \\ # * 进行避免。 列表 项目 项目 项目 项目1 项目2 项目3 [ ] 计划任务 [x] 完成任务 - 项目 * 项目 + 项目 1. 项目1 2. 项目2 3. 项目3 - [ ] 计划任务 - [x] 完成任务 链接 链接: [link](https://mp.csdn.net). 图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg) 带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg =30x30) 居中的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center) 居中并且带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg#pic_center =30x30) 注脚 一个具有注脚的文本。[^1] 随后换行写上 [^1]: 注脚的解释 字体颜色 内容 灰色 灰色 红色 红色 蓝色 蓝色 注释 Markdown将文本转换为 HTML。 *[HTML]: 超文本标记语言 LaTeX 数学公式 Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 是通过 Euler integral {% math %} \\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,. {% endmath %} 插入甘特图 gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section 现有任务 已完成 :done, des1, 2014-01-06,2014-01-08 进行中 :active, des2, 2014-01-09, 3d 计划中 : des3, after des2, 5d 插入UML图 sequenceDiagram 张三 ->> 李四: 你好！李四, 最近怎么样? 李四-->>王五: 你最近怎么样，王五？ 李四--x 张三: 我很好，谢谢! 李四-x 王五: 我很好，谢谢! Note right of 王五: 李四想了很长时间, 文字太长了不适合放在一行. 李四-->>张三: 打量着王五... 张三->>王五: 很好... 王五, 你怎么样? 插入Mermaid流程图 graph LR A[长方形] -- 链接 --> B((圆)) A --> C(圆角长方形) B --> D{菱形} C --> D 插入Flowchart流程图 st=>start: 开始 e=>end: 结束 test=>condition: 测试 op=>operation: 我的操作 cond=>condition: 确认？ st->op->cond->test cond(yes)->test cond(no)->op 数学 特殊字符 \\begin{array}{|c|c|c|c|c|c|c|c|} \\hline {\\alpha} & {\\backslash alpha} & {\\theta} & {\\backslash theta} & {o} & {o} & {\\upsilon} & {\\backslash upsilon} \\\\\\\\ \\hline {\\beta} & {\\backslash beta} & {\\vartheta} & {\\backslash vartheta} & {\\pi} & {\\backslash pi} & {\\phi} & {\\backslash phi} \\\\\\\\ \\hline {\\gamma} & {\\backslash gamma} & {\\iota} & {\\backslash iota} & {\\varpi} & {\\backslash varpi} & {\\varphi} & {\\backslash varphi} \\\\\\\\ \\hline {\\delta} & {\\backslash delta} & {\\kappa} & {\\backslash kappa} & {\\rho} & {\\backslash rho} & {\\chi} & {\\backslash chi} \\\\\\\\ \\hline {\\epsilon} & {\\backslash epsilon} & {\\lambda} & {\\backslash lambda} & {\\varrho} & {\\backslash varrho} & {\\psi} & {\\backslash psi} \\\\\\\\ \\hline {\\varepsilon} & {\\backslash varepsilon} & {\\mu} & {\\backslash mu} & {\\sigma} & {\\backslash sigma} & {\\omega} & {\\backslash omega} \\\\\\\\ \\hline {\\zeta} & {\\backslash zeta} & {\\nu} & {\\backslash nu} & {\\varsigma} & {\\backslash varsigma} & {} & {} \\\\\\\\ \\hline {\\eta} & {\\backslash eta} & {\\xi} & {\\backslash xi} & {\\tau} & {\\backslash tau} & {} & {} \\\\\\\\ \\hline {\\Gamma} & {\\backslash Gamma} & {\\Lambda} & {\\backslash Lambda} & {\\Sigma} & {\\backslash Sigma} & {\\Psi} & {\\backslash Psi} \\\\\\\\ \\hline {\\Delta} & {\\backslash Delta} & {\\Xi} & {\\backslash Xi} & {\\Upsilon} & {\\backslash Upsilon} & {\\Omega} & {\\backslash Omega} \\\\\\\\ \\hline {\\Omega} & {\\backslash Omega} & {\\Pi} & {\\backslash Pi} & {\\Phi} & {\\backslash Phi} & {} & {} \\\\\\\\ \\hline \\end{array} \\delta \\Delta \\eta \\xi \\Lambda \\Sigma \\varepsilon \\mu \\vec{a} \\sum_{i=0}^n \\prod_{i=0}^n \\circ \\alpha \\theta o \\upsilon \\infty \\cup \\cap \\forall $\\pm $ $\\to$ $\\Rightarrow$ $\\iff$ \\beta \\vartheta \\pi \\phi $\\lim_{n\\rightarrow+\\infty}\\frac{1}{n(n+1)}$ \\gamma \\iota \\varpi \\varphi $\\forall$ $\\exists$ $\\neq$ $\\leq$ $\\geq$ \\delta \\kappa \\rho \\chi $\\sim$ $\\times$ \\cdot $\\in$ $\\notin$ $\\subset$ $\\subseteq$ $\\bigcup$ $\\bigcap$ $\\emptyset$ $\\not\\subset$ \\epsilon \\lambda \\varrho \\psi \\varepsilon \\mu \\sigma \\omega \\zeta \\nu \\varsigma \\eta \\xi \\tau \\Gamma \\Lambda \\Sigma \\Psi \\Delta \\partial \\Xi \\Upsilon \\Omega \\Omega \\Pi \\Phi {% math %}\\delta{% endmath %} {% math %}\\Delta{% endmath %} {% math %}\\eta{% endmath %} {% math %}\\xi{% endmath %} {% math %}\\Lambda{% endmath %} {% math %}\\Sigma{% endmath %} {% math %}\\varepsilon{% endmath %} {% math %}\\mu{% endmath %} {% math %}\\vec{a}{% endmath %} {% math %}\\sum_{i=0}^n{% endmath %} {% math %}\\prod_{i=0}^n{% endmath %} {% math %}\\circ{% endmath %} {% math %}\\alpha{% endmath %} {% math %}\\theta{% endmath %} {% math %}o{% endmath %} {% math %}\\upsilon{% endmath %} {% math %}\\infty{% endmath %} {% math %}\\cup{% endmath %} {% math %}\\cap{% endmath %} {% math %}\\forall{% endmath %} $\\pm $ $\\to$ $\\Rightarrow$ $\\iff$ {% math %}\\beta{% endmath %} {% math %}\\vartheta{% endmath %} {% math %}\\pi{% endmath %} {% math %}\\phi{% endmath %} $\\lim_{n\\rightarrow+\\infty}\\frac{1}{n(n+1)}$ {% math %}\\gamma{% endmath %} {% math %}\\iota{% endmath %} {% math %}\\varpi{% endmath %} {% math %}\\varphi{% endmath %} $\\forall$ $\\exists$ $\\neq$ $\\leq$ $\\geq$ {% math %}\\delta{% endmath %} {% math %}\\kappa{% endmath %} {% math %}\\rho{% endmath %} {% math %}\\chi{% endmath %} $\\sim$ $\\times$ {% math %}\\cdot{% endmath %} $\\in$ $\\notin$ $\\subset$ $\\subseteq$ $\\bigcup$ $\\bigcap$ $\\emptyset$ $\\not\\subset$ {% math %}\\epsilon{% endmath %} {% math %}\\lambda{% endmath %} {% math %}\\varrho{% endmath %} {% math %}\\psi{% endmath %} {% math %}\\varepsilon{% endmath %} {% math %}\\mu{% endmath %} {% math %}\\sigma{% endmath %} {% math %}\\omega{% endmath %} {% math %}\\zeta{% endmath %} {% math %}\\nu{% endmath %} {% math %}\\varsigma{% endmath %} {% math %}\\eta{% endmath %} {% math %}\\xi{% endmath %} {% math %}\\tau{% endmath %} {% math %}\\Gamma{% endmath %} {% math %}\\Lambda{% endmath %} {% math %}\\Sigma{% endmath %} {% math %}\\Psi{% endmath %} {% math %}\\Delta{% endmath %} {% math %}\\partial{% endmath %} {% math %}\\Xi{% endmath %} {% math %}\\Upsilon{% endmath %} {% math %}\\Omega{% endmath %} {% math %}\\Omega{% endmath %} {% math %}\\Pi{% endmath %} {% math %}\\Phi{% endmath %} 公式 公式： \\\\ \\mathbf{X} = \\left( \\begin{array}{ccc} x\\_{11} & x\\_{12} & \\ldots \\\\\\\\ x\\_{21} & x\\_{22} & \\ldots \\\\\\\\ \\vdots & \\vdots & \\ddots \\end{array} \\right) {% math %} 公式： \\\\ \\mathbf{X} = \\left( \\begin{array}{ccc} x\\_{11} & x\\_{12} & \\ldots \\\\\\\\ x\\_{21} & x\\_{22} & \\ldots \\\\\\\\ \\vdots & \\vdots & \\ddots \\end{array} \\right) {% endmath %} 矩阵 \\begin{matrix}1 & 2\\\\\\\\3 &4\\end{matrix} \\begin{pmatrix}1 & 2\\\\\\\\3 &4\\end{pmatrix} \\begin{bmatrix}1 & 2\\\\\\\\3 &4\\end{bmatrix} \\begin{Bmatrix}1 & 2\\\\\\\\3 &4\\end{Bmatrix} \\begin{vmatrix}1 & 2\\\\\\\\3 &4\\end{vmatrix} \\left|\\begin{matrix}1 & 2\\\\\\\\3 &4\\end{matrix}\\right| \\begin{Vmatrix}1 & 2\\\\\\\\3 &4\\end{Vmatrix} {% math %}\\begin{matrix}1 & 2\\\\\\\\3 &4\\end{matrix}{% endmath %} {% math %}\\begin{pmatrix}1 & 2\\\\\\\\3 &4\\end{pmatrix}{% endmath %} {% math %}\\begin{bmatrix}1 & 2\\\\\\\\3 &4\\end{bmatrix}{% endmath %} {% math %}\\begin{Bmatrix}1 & 2\\\\\\\\3 &4\\end{Bmatrix}{% endmath %} {% math %}\\begin{vmatrix}1 & 2\\\\\\\\3 &4\\end{vmatrix}{% endmath %} {% math %}\\left|\\begin{matrix}1 & 2\\\\\\\\3 &4\\end{matrix}\\right|{% endmath %} {% math %}\\begin{Vmatrix}1 & 2\\\\\\\\3 &4\\end{Vmatrix}{% endmath %} 积分 \\int_a^b f(x)\\mathrm{d}x \\int_a^b f(x)\\,\\mathrm{d}x {% math %}\\int_a^b f(x)\\mathrm{d}x{% endmath %} {% math %}\\int_a^b f(x)\\,\\mathrm{d}x{% endmath %} 根式 \\sqrt{2} \\sqrt{1+\\sqrt[p]{1+a^2}} \\sqrt{1+\\sqrt[^p\\!]{1+a^2}} {% math %}\\sqrt{2}分式 \\frac{x+y}{2} \\frac{1}{1+\\frac{1}{2}} {% math %}\\frac{x+y}{2}{% endmath %} {% math %}\\frac{1}{1+\\frac{1}{2}}{% endmath %} "},"Markdown/adoc.html":{"url":"Markdown/adoc.html","title":"Adoc","keywords":"","body":""},"SRE/":{"url":"SRE/","title":"运维","keywords":"","body":"系统 Mysql 查看mysql相关信息 查看数据库进程 ： show processlist; 或者 /work/servers/mysql/bin/mysqladmin -u root processlist 查看数据库事务信息 ： SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX; 查看当前锁定的事务 ： SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; 查看当前等锁的事务 ： SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS; 查看所有表的大小： SELECT CONCAT(table_schema,'.',table_name) AS 'Table Name', CONCAT(ROUND(table_rows/1000000,4),'M') AS 'Number of Rows', CONCAT(ROUND(data_length/(1024*1024*1024),4),'G') AS 'Data Size', CONCAT(ROUND(index_length/(1024*1024*1024),4),'G') AS 'Index Size', CONCAT(ROUND((data_length+index_length)/(1024*1024*1024),4),'G') AS'Total'FROM information_schema.TABLES; 导库操作 Innodb表的导库操作 mysqldump -uroot -p -h127.0.0.1 --single-transaction --dump-slave=2 -B $db --tables 表名> /tmp/${db}.sql MyISM表的导库操作 mysqldump -uroot -p -h127.0.0.1 --lock-all-tables --dump-slave=2 -B $db --tables 表名> /tmp/${db}.sql Linux 升级内核 sudo wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && sudo chmod +x bbr.sh && sudo ./bbr.sh 检查网络状态 Traceroute iperf mtr 时间同步 sudo ntpdate -u time.pool.aliyun.com 四层转发 ssh -C -f -N -g -L 0.0.0.0:中转端口:目的IP:目的端口 连接用户@中转IP "},"SRE/System.html":{"url":"SRE/System.html","title":"系统","keywords":"","body":"系统 Mysql 查看mysql相关信息 查看数据库进程 ： show processlist; 或者 /work/servers/mysql/bin/mysqladmin -u root processlist 查看数据库事务信息 ： SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX; 查看当前锁定的事务 ： SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; 查看当前等锁的事务 ： SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS; 查看所有表的大小： SELECT CONCAT(table_schema,'.',table_name) AS 'Table Name', CONCAT(ROUND(table_rows/1000000,4),'M') AS 'Number of Rows', CONCAT(ROUND(data_length/(1024*1024*1024),4),'G') AS 'Data Size', CONCAT(ROUND(index_length/(1024*1024*1024),4),'G') AS 'Index Size', CONCAT(ROUND((data_length+index_length)/(1024*1024*1024),4),'G') AS'Total'FROM information_schema.TABLES; 导库操作 Innodb表的导库操作 mysqldump -uroot -p -h127.0.0.1 --single-transaction --dump-slave=2 -B $db --tables 表名> /tmp/${db}.sql MyISM表的导库操作 mysqldump -uroot -p -h127.0.0.1 --lock-all-tables --dump-slave=2 -B $db --tables 表名> /tmp/${db}.sql Linux 升级内核 sudo wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && sudo chmod +x bbr.sh && sudo ./bbr.sh 检查网络状态 Traceroute iperf mtr 时间同步 sudo ntpdate -u time.pool.aliyun.com 四层转发 ssh -C -f -N -g -L 0.0.0.0:中转端口:目的IP:目的端口 连接用户@中转IP "},"SRE/Jenkins.html":{"url":"SRE/Jenkins.html","title":"Jenkins","keywords":"","body":"Jenkins Jenkins迭代流程 GiteLab_jjb-template 存储了jenkins job的templete文件 根据tpl文件内的字段pipeline-scm，定义pipline文件的位置 SaaS的CI发布pipline文件位置 GiteLab_pipeline，其中有三个分支，master，ci，cd 根据job-template.id字段标识，在具体job信息中通过import方法调用 GiteLab_jjb存储了job文件，通过hook通知Jenkins_job-update调用进行配置信息的迭代，部分项目需要手动触发构建 Jenkins_job-update根据hook请求来的jenkins-jobs --conf jenkins_jobs.ini update --workers 5文件调用docker完成对Jenkins_work内job配置的更新 JJB基本原理 Jenkins Job Builder 基本组成原理 完整jenkins job组成 job配置文件，记录调用templete文件的id，env配置信息 - !include: jenkins/defaults.yml - !include: jenkins/templates/ci/template.yml - project: name: TEST folder: TEST jobs: - template_pipeline: job_name: '{folder}/{job_prefix}-test' env_vars: | key=value #!include: jenkins/templates/ci/template.yml 引用的的templete的文件位置 template_pipeline 调用的templete的id，即第八行 folder: TEST、env_vars: 都是配置信息 templete配置文件，记录调用pipline的相关信息 job-template: id: template_pipeline name: '{job_name}' project-type: pipeline description: '{description|sample}' git_branches: - ci pipeline-scm: scm: - git: url: '{git_server_base_url|http://GiteLab_pipeline/' branches: \"{git_branches}\" shallow-clone: true script-path: jenkinsfile/Jenkinsfile.{jenkinsfile} lightweight-checkout: true id: template_pipeline 作为templete的唯一标识id，用于job引用 pipeline-scm: 引用pipline的方法，目前采取的是调用 GiteLab_pipeline 的指定pipline配置文件 git_branches: 读取 GiteLab_pipeline的哪个分支，(master、ci 、cd) script-path: jenkinsfile/ci/Jenkinsfile.{jenkinsfile} 存储pipline的文件在git中的位置 pipline文件，实现指定的工作流流程 Jenkins的查看层级，server -> view -> project -> job Jenkins工作流基本方法 def node=\"\" if (env.node){ node =env.node }else{ node =\"develop\" } def maven_image=\"\" if (env.maven_image){ maven_image =env.maven_image }else{ maven_image =\"docker.io/maven:3.3.9\" } pipeline { agent {label node} agent {docker { image \"${maven_image}\" label node args \"${docker_args}\" }} options { timeout(time: 1, unit: 'HOURS') } stages { stage('delete workspace') { steps{ deleteDir() } } stage('checkout') { steps{ script{ } } } } stage('build') { steps{ script{ } } post{ always{ script{ if (env.DNET_PRODUCT){ build job: 'sourcecode_scan', parameters: [string(name: 'url', value: BUILD_URL),string(name: 'product', value: \"\")], wait: false } } failure{ script{ def subject = env.email_build_subject ? \"${env.email_build_subject}\" : \"构建失败-${env.JOB_NAME}\" def to = env.email_build_recipients ? \"${env.email_build_recipients}\" : \"heweiwei@hd123.com\" def body = env.email_build_body ? \"${env.email_build_body}\" : \"${env.JOB_NAME}构建失败,更多信息请查阅：${BUILD_URL}\" // send email emailext subject: subject, to: to, body:body,attachLog:true } } } } } post{ success{ script{ if (env.post_shell){ sh \"\"\" ${env.post_shell} \"\"\" } } } } } build job 调用创建新的job进行处理 triggerRemoteJob job 调用新job "}}